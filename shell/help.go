package shell

import (
	"fmt"
	"os"
	"strconv"
)

func help(commandUsage bool) {
	max := 40

	if commandUsage == true {
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "帮助文档", "")
		fmt.Println("")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "权限控制-----------------------------------------------------------------", "")
		fmt.Printf("\n")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "login", "用户登陆")
		fmt.Printf("\n")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "服务树-------------------------------------------------------------------", "")
		fmt.Printf("\n")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "ls", "列出服务树(平铺模式")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "ls -l", "列出服务树(列表模式)")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "ls -l -p", "列出服务树产品集(列表模式)")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "ls -l -s", "列出服务树系统(列表模式)")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "ls -l -a", "列出服务树应用(列表模式)")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "cd /devops", "进入服务树节点（需要输入绝对路径,格式为英文字符的  /ARMS产品集/ARMS系统/ARMS应用")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "example:", "")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "go [应用名称] [环境:生产/测试]", "快捷直达查看指定应用的日志,环境:生产(-prod)/测试(-test),默认生产环境")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "go hoc-openrestry-ser -test", "快捷直达查看HocNginx网关日志(ARMS应用名)")
		fmt.Printf("\n")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "Filter Example, Notice:", "等号两边不能有空格,同一tag多个值用逗号隔开,多个tag过滤器用空格隔开")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "添加操作:", "")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -a _ip_=172.19.38.71", "追加ip条件")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -a filename=/app/docker/fpc/logs/sql.2022-05-06-10.log", "追加日志文件名称条件")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -a _ip_=172.19.38.71 filename=/app/docker/fpc/logs/sql.2022-05-06-10.log", "追加ip,日志文件名称条件")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -a _ip_=172.19.38.71,172.19.253.166", "追加多个ip条件")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "删除操作:", "")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -d _ip_=192.168.16.77", "删除ip条件")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -d filename=/app/docker/fpc/logs/sql.2022-05-06-10.log", "删除日志文件名称条件")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -d _ip_=172.19.38.71 filename=/app/docker/fpc/logs/sql.2022-05-06-10.log", "删除ip,日志文件名称条件")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -d _ip_=172.19.38.71,172.19.253.166", "删除多个ip条件")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "添加,删除同时操作:", "")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -a _ip_=192.168.16.77 -d filename=/app/docker/fpc/logs/sql.2022-05-06-10.log", "添加ip条件,删除日志文件名称条件")
		fmt.Printf("\n")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "查询日志-----------------------------------------------------------------", "")
		fmt.Printf("\n")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "more", "正序查看历史日志,可分页")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "less", "倒序查看历史日志,直接查看到当前时间点的倒叙日志")
		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "tail", "时实监听模式(全量模式)")

		fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "------------------------------------------------------------------------", "")
	}

	envMore := fmt.Sprintf(infoCode, "[应用切换]参数说明: go [应用名称] [环境:生产/测试] 快捷直达查看指定应用的日志,环境:生产(-prod)/测试(-test),默认生产环境")
	fmt.Fprintln(os.Stdout, envMore)
	envModeExample := fmt.Sprintf(warningCode, "Example-01: go loki-ser -test")
	fmt.Fprintln(os.Stdout, envModeExample)
	argsMore := fmt.Sprintf(infoCode, "[历史数据]参数说明: more 后面 机器IP或者日志类型 及 日志文件名称 参数都支持 Tab键自动补全, 值可传可不传, Example中文件名称都采用 filename抽象代替")
	fmt.Fprintln(os.Stdout, argsMore)
	orderMore := fmt.Sprintf(infoCode, "[历史数据]排序规则: 值选项可为: asc(升序)/desc(降序), 默认根据当前日志查询时间进行降序显示,即显示最新数据, 若自定义指定还需在参数前加[-]短横线符号")
	fmt.Fprintln(os.Stdout, orderMore)
	directQueryMore := fmt.Sprintf(infoCode, "[历史数据]简单查询: more [IP/日志类型] [文件名称] [排序规则] (查询最近1小时内的20条日志,可按空格进行翻页,每页20行)")
	directQueryMoreExample := fmt.Sprintf(warningCode, "Example-01: more 172.19.169.135或application application.2022-07-12-5.log -asc或-desc")
	fmt.Fprintln(os.Stdout, directQueryMore)
	fmt.Fprintln(os.Stdout, directQueryMoreExample)
	filterQueryMode := fmt.Sprintf(infoCode, "[历史数据]关键字查询: more [IP/日志类型] [文件名称] [排序规则] | grep [关键字] (查询最近1小时内带关键字的20条日志,可按空格进行翻页,每页20行)")
	filterQueryModeExample := fmt.Sprintf(warningCode, "Example-02: more 172.19.169.135或application filename -asc或-desc | grep keyword")
	fmt.Fprintln(os.Stdout, filterQueryMode)
	fmt.Fprintln(os.Stdout, filterQueryModeExample)
	multiFilterQueryMode := fmt.Sprintf(infoCode, "[历史数据]多关键字查询: more [IP/日志类型] [文件名称] [排序规则] | grep [关键字] | grep [关键字] (查询最近1小时内同时带多个关键字的20条日志,可按空格进行翻页,每页20行)")
	multiFilterQueryModeExample := fmt.Sprintf(warningCode, "Example-03: more 172.19.169.135或application filename -asc或-desc | grep keyword1 | grep keyword2")
	fmt.Fprintln(os.Stdout, multiFilterQueryMode)
	fmt.Fprintln(os.Stdout, multiFilterQueryModeExample)
	relativelyQueryMore := fmt.Sprintf(infoCode, "[历史数据]相对时间查询: more [IP/日志类型] [文件名称] [排序规则] | [相对时间] (可具体指定任意值,时间单位需用户手动指定:XX分钟[m],XX小时[h])")
	relativelyQueryMoreExample := fmt.Sprintf(warningCode, "Example-04: more 172.19.169.135或application filename -asc或-desc | 6m/2h")
	fmt.Fprintln(os.Stdout, relativelyQueryMore)
	fmt.Fprintln(os.Stdout, relativelyQueryMoreExample)
	relativelyKeywordQueryMore := fmt.Sprintf(infoCode, "[历史数据]相对时间带关键字查询: more [IP/日志类型] [文件名称] [排序规则] | grep [关键字] | [相对时间] (可具体指定任意值,时间单位需用户手动指定:XX分钟[m],XX小时[h])")
	relativelyKeywordQueryMoreExample := fmt.Sprintf(warningCode, "Example-05: more 172.19.169.135或application filename -asc或-desc | grep keyword | 15m/1h")
	fmt.Fprintln(os.Stdout, relativelyKeywordQueryMore)
	fmt.Fprintln(os.Stdout, relativelyKeywordQueryMoreExample)
	integralQueryMore := fmt.Sprintf(infoCode, "[历史数据]整点时间查询: more [IP/日志类型] [文件名称] [排序规则] | [整点时间] (值可选项:今天[jt],昨天[zt],前天[qt]; 可具体指定任意值:XX分钟[fz],XX小时[xs])")
	integralQueryMoreExample := fmt.Sprintf(warningCode, "Example-06: more 172.19.169.135或application filename -asc或-desc | jt/zt/qt/15fz/4xs")
	fmt.Fprintln(os.Stdout, integralQueryMore)
	fmt.Fprintln(os.Stdout, integralQueryMoreExample)
	integralKeywordQueryMore := fmt.Sprintf(infoCode, "[历史数据]整点时间带关键字查询: more [IP/日志类型] [文件名称] [排序规则] | grep [关键字] | [整点时间] (值可选项:今天[jt],昨天[zt],前天[qt]; 可具体指定任意值:XX分钟[fz],XX小时[xs])")
	integralKeywordQueryMoreExample := fmt.Sprintf(warningCode, "Example-07: more 172.19.169.135或application filename -asc或-desc | grep keyword | jt/zt/qt/1fz/1xs")
	fmt.Fprintln(os.Stdout, integralKeywordQueryMore)
	fmt.Fprintln(os.Stdout, integralKeywordQueryMoreExample)
	rangeQueryMore := fmt.Sprintf(infoCode, "[历史数据]自定义时间查询: more [IP/日志类型] [文件名称] [排序规则] | [2022-01-2812:00:00](开始时间) [2022-01-2812:05:00](结束时间)")
	rangeQueryMoreExample := fmt.Sprintf(warningCode, "Example-08: more 172.19.169.135或application filename -asc或-desc | 2022-01-2812:00:00 2022-01-2812:05:00")
	fmt.Fprintln(os.Stdout, rangeQueryMore)
	fmt.Fprintln(os.Stdout, rangeQueryMoreExample)
	grepQueryMore := fmt.Sprintf(infoCode, "[历史数据]自定义时间带关键字查询: more [IP/日志类型] [文件名称] [排序规则] | grep [关键字] |  [2022-01-2812:00:00](开始时间) [2022-01-2812:05:00](结束时间) ")
	grepQueryMoreExample := fmt.Sprintf(warningCode, "Example-09: more 172.19.169.135或application filename -asc或-desc | grep keyword | 2022-01-2812:00:00 2022-01-2812:05:00")
	fmt.Fprintln(os.Stdout, grepQueryMore)
	fmt.Fprintln(os.Stdout, grepQueryMoreExample)
	multiGrepQueryMore := fmt.Sprintf(infoCode, "[历史数据]自定义时间带多关键字查询: more [IP/日志类型] [文件名称] [排序规则] | grep [关键字] | grep [关键字] | [2022-01-2812:00:00](开始时间) [2022-01-2812:05:00](结束时间) ")
	multiGrepQueryMoreExample := fmt.Sprintf(warningCode, "Example-10: more 172.19.169.135或application filename -asc或-desc | grep keyword1 |  grep keyword2 | 2022-01-2812:00:00 2022-01-2812:05:00 ")
	fmt.Fprintln(os.Stdout, multiGrepQueryMore)
	fmt.Fprintln(os.Stdout, multiGrepQueryMoreExample)
	backQueryMore := fmt.Sprintf(infoCode, "[历史数据]最近一次查询结果显示: back ")
	backQueryMoreExample := fmt.Sprintf(warningCode, "Example-11: back")
	fmt.Fprintln(os.Stdout, backQueryMore)
	fmt.Fprintln(os.Stdout, backQueryMoreExample)
	delimiterSign := fmt.Sprintf(infoCode, "------------------------------------------------------------------------")
	fmt.Println(delimiterSign)

	// pointQueryMore := fmt.Sprintf(infoCode, "时间点查询: more | [2022-01-2812:00:00](默认时间点正负60min)")
	// pointRangeQueryMore := fmt.Sprintf(infoCode, "时间点范围查询: more | [2022-01-2812:00:00] [30min](时间点正负30min,单位统一为min,并需明确指出)")
	// grepPointQueryMore := fmt.Sprintf(infoCode, "过滤时间点查询: more | grep [关键字] | [2022-01-2812:00:00](默认时间点正负60min)")
	// grepPointRangeQueryMore := fmt.Sprintf(infoCode, "过滤时间点范围查询: more | grep [关键字] | [2022-01-2812:00:00] [10min](时间点正负10min,单位统一为min,并需明确指出)")
	// pointQueryMoreExample := fmt.Sprintf(warningCode, "Example: more | 2022-01-2812:00:00 ")
	// pointRangeQueryMoreExample := fmt.Sprintf(warningCode, "Example: more | 2022-01-2812:00:00 30min")
	// grepPointQueryMoreExample := fmt.Sprintf(warningCode, "Example: more | grep error | 2022-01-2812:00:00")
	// grepPointRangeQueryMoreExample := fmt.Sprintf(warningCode, "Example: more | grep error | 2022-01-2812:00:00 10min")
	// fmt.Fprintln(os.Stdout, pointQueryMore)
	// fmt.Fprintln(os.Stdout, pointQueryMoreExample)
	// fmt.Fprintln(os.Stdout, pointRangeQueryMore)
	// fmt.Fprintln(os.Stdout, pointRangeQueryMoreExample)
	// fmt.Fprintln(os.Stdout, grepPointQueryMore)
	// fmt.Fprintln(os.Stdout, grepPointQueryMoreExample)
	// fmt.Fprintln(os.Stdout, grepPointRangeQueryMore)
	// fmt.Fprintln(os.Stdout, grepPointRangeQueryMoreExample)

	uniqueEncodingExample := fmt.Sprintf(redCode, "N6keVXhgvRO0")
	basicContextQueryMode := fmt.Sprintf(infoCode, "[上下文]简单查询: 日志上下文红色编码ID (默认查看文件上文30行,下文5行,可通过空格翻页,每页20行)")
	basicThreadContextQueryMode := fmt.Sprintf(infoCode, "[上下文]简单查询: 线程上下文红色编码ID (默认查看线程上文30行,下文5行,可通过空格翻页,每页20行)")
	basicContextQueryModeExample := fmt.Sprintf(warningCode, "Example-01:"+uniqueEncodingExample)
	fmt.Fprintln(os.Stdout, basicContextQueryMode)
	fmt.Fprintln(os.Stdout, basicThreadContextQueryMode)
	fmt.Fprintln(os.Stdout, basicContextQueryModeExample)
	basicKeywordContextQueryMode := fmt.Sprintf(infoCode, "[上下文]带自定义编码关键字查询: 日志/线程上下文任意一个红色编码ID | [关键字] (默认查看上文30行,下文5行,可通过空格翻页,每页20行)")
	basicKeywordContextQueryModeExample := fmt.Sprintf(warningCode, "Example-02:"+uniqueEncodingExample+"| keyword")
	fmt.Fprintln(os.Stdout, basicKeywordContextQueryMode)
	fmt.Fprintln(os.Stdout, basicKeywordContextQueryModeExample)
	customAboveContextQueryMode := fmt.Sprintf(infoCode, "[上下文]自定义上文行数查询: 日志/线程上下文任意一个红色编码ID [上文行数] (查看文件/日志上文指定行数,下文默认5行,可通过空格翻页,每页20行)")
	customAboveContextQueryModeExample := fmt.Sprintf(warningCode, "Example-03:"+uniqueEncodingExample+"50")
	fmt.Fprintln(os.Stdout, customAboveContextQueryMode)
	fmt.Fprintln(os.Stdout, customAboveContextQueryModeExample)
	customContextQueryMode := fmt.Sprintf(infoCode, "[上下文]自定义上下文行数查询: 日志/线程上下文任意一个红色编码ID [上文行数] [下文行数] (查看文件/日志上文指定行数,下文指定行数,可通过空格翻页,每页20行)")
	customContextQueryModeExample := fmt.Sprintf(warningCode, "Example-04:"+uniqueEncodingExample+"50 20")
	fmt.Fprintln(os.Stdout, customContextQueryMode)
	fmt.Fprintln(os.Stdout, customContextQueryModeExample)
	customKeywordContextQueryMode := fmt.Sprintf(infoCode, "[上下文]自定义上下文行数且带自定义编码关键字查询: 日志/线程上下文任意一个红色编码ID [上文行数] [下文行数] | [关键字] (查看上文指定行数,下文指定行数,可通过空格翻页,每页20行)")
	customKeywordContextQueryModeExample := fmt.Sprintf(warningCode, "Example-05:"+uniqueEncodingExample+"50 20 | keyword")
	fmt.Fprintln(os.Stdout, customKeywordContextQueryMode)
	fmt.Fprintln(os.Stdout, customKeywordContextQueryModeExample)
	fmt.Println(delimiterSign)

	tail := fmt.Sprintf(infoCode, "[实时数据]查询: tail")
	tailExample := fmt.Sprintf(warningCode, "Example-01: tail ")
	grepTail := fmt.Sprintf(infoCode, "[实时数据]带关键字查询: tail | grep [关键字]")
	grepTailExample := fmt.Sprintf(warningCode, "Example-02: tail | grep keyword")
	multiGrepTail := fmt.Sprintf(infoCode, "[实时数据]带多关键字查询: tail | grep [关键字1] [关键字2] [关键字n..], 多个关键字用空格隔开")
	multiGrepTailExample := fmt.Sprintf(warningCode, "Example-03: tail | grep keyword1 keyword2 keyword3")
	noticeTail := fmt.Sprintf(infoCode, "[实时数据]查询中断: Ctrl+C, 若按一次后没有看到命令行显示(数据处理速率导致), 请按Enter回车, 等待几秒钟")
	noticeTailExample := fmt.Sprintf(warningCode, "Example-04: Ctrl+C")

	fmt.Fprintln(os.Stdout, tail)
	fmt.Fprintln(os.Stdout, tailExample)
	fmt.Fprintln(os.Stdout, grepTail)
	fmt.Fprintln(os.Stdout, grepTailExample)
	fmt.Fprintln(os.Stdout, multiGrepTail)
	fmt.Fprintln(os.Stdout, multiGrepTailExample)
	fmt.Fprintln(os.Stdout, noticeTail)
	fmt.Fprintln(os.Stdout, noticeTailExample)
}

func filterdoc() {
	max := 40
	fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter", "已有过滤器")
	for key, value := range filterMap {
		fmt.Println(key, ":", value)
	}
	fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "------------------------------------------------------------------------", "")
	fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "Filter Example, Notice:", "等号两边不能有空格,同一tag多个值用逗号隔开,多个tag过滤器用空格隔开")
	fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "添加操作:", "")
	fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -a _ip_=172.19.38.71", "追加ip条件")
	fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -a filename=/app/docker/fpc/logs/sql.2022-05-06-10.log", "追加日志文件名称条件")
	fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -a _ip_=172.19.38.71 filename=/app/docker/fpc/logs/sql.2022-05-06-10.log", "追加ip,日志文件名称条件")
	fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -a _ip_=172.19.38.71,172.19.253.166", "追加多个ip条件")
	fmt.Printf("\n")
	fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "删除操作:", "")
	fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -d _ip_=192.168.16.77", "删除ip条件")
	fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -d filename=/app/docker/fpc/logs/sql.2022-05-06-10.log", "删除日志文件名称条件")
	fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -d _ip_=172.19.38.71 filename=/app/docker/fpc/logs/sql.2022-05-06-10.log", "删除ip,日志文件名称条件")
	fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -d _ip_=172.19.38.71,172.19.253.166", "删除多个ip条件")
	fmt.Printf("\n")
	fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "添加,删除同时操作:", "")
	fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "filter -a _ip_=192.168.16.77 -d filename=/app/docker/fpc/logs/sql.2022-05-06-10.log", "添加ip条件,删除日志文件名称条件")
	fmt.Printf("%-"+strconv.Itoa(max)+"s %s\n", "------------------------------------------------------------------------", "")
}
